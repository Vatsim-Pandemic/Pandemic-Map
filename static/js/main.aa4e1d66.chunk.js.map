{"version":3,"sources":["resources/tower0.png","resources/tower1.png","resources/tower2.png","resources/tower3.png","resources/tower4.png","resources/towerS.png","resources/lab0.png","resources/lab1.png","resources/lab2.png","resources/lab3.png","resources/lab4.png","resources/labS.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","App","state","lat","lng","zoom","airports","lines","this","tick","interval","setInterval","clearInterval","fetch","process","API_URL","then","res","json","catch","err","console","error","setState","position","Map","className","center","ref","map","onZoomEnd","event","prevState","TileLayer","attribution","url","MAP_KEY","opacity","airport","Marker","icon","number","infectionLevel","level","tower0","tower1","tower2","tower3","tower4","lab0","lab1","lab2","lab3","lab4","towerS","labS","iconSize","iconAnchor","popupAnchor","key","icao","latitude","longitude","leafletElement","getZoom","Tooltip","offset","permanent","direction","0","1","2","3","4","5","6","7","8","9","10","11","getInfectionLevelString","Polyline","positions","from","to","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa4e1d66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tower0.eb9959ca.png\";","module.exports = __webpack_public_path__ + \"static/media/tower1.ca74cfa9.png\";","module.exports = __webpack_public_path__ + \"static/media/tower2.b6548075.png\";","module.exports = __webpack_public_path__ + \"static/media/tower3.11445d06.png\";","module.exports = __webpack_public_path__ + \"static/media/tower4.a893cd0d.png\";","module.exports = __webpack_public_path__ + \"static/media/towerS.bfae78a4.png\";","module.exports = __webpack_public_path__ + \"static/media/lab0.69af5b9d.png\";","module.exports = __webpack_public_path__ + \"static/media/lab1.8b770617.png\";","module.exports = __webpack_public_path__ + \"static/media/lab2.25d96492.png\";","module.exports = __webpack_public_path__ + \"static/media/lab3.4bdef640.png\";","module.exports = __webpack_public_path__ + \"static/media/lab4.e4221859.png\";","module.exports = __webpack_public_path__ + \"static/media/labS.64ed1907.png\";","import React, { Component } from 'react';\n\nimport { Map, TileLayer, Marker, Tooltip, Polyline } from 'react-leaflet';\nimport L from 'leaflet';\nimport './App.css';\n\nimport tower0 from './resources/tower0.png';\nimport tower1 from './resources/tower1.png';\nimport tower2 from './resources/tower2.png';\nimport tower3 from './resources/tower3.png';\nimport tower4 from './resources/tower4.png';\nimport towerS from './resources/towerS.png';\n\nimport lab0 from './resources/lab0.png';\nimport lab1 from './resources/lab1.png';\nimport lab2 from './resources/lab2.png';\nimport lab3 from './resources/lab3.png';\nimport lab4 from './resources/lab4.png';\nimport labS from './resources/labS.png';\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nfunction getInfectionLevelString(number) {\n  number += 1;\n\n  return {\n    0: \"Cured\",\n    1: \"No Risk\",\n    2: \"Low Risk\",\n    3: \"High Risk\",\n    4: \"Outbreak\",\n    5: \"Cured Lab\",\n    6: \"No Risk Lab\",\n    7: \"Low Risk Lab\",\n    8: \"High Risk Lab\",\n    9: \"Outbreak Lab\",\n    10: \"Safe\",\n    11: \"Safe Lab\",\n  }[number]\n}\n\nfunction getAirportIcon(number) {\n  number +=1;\n\n  return L.icon({\n    iconUrl: ((level) => {\n      switch (level) {\n        case 0: return tower0;\n        case 1: return tower1;\n        case 2: return tower2;\n        case 3: return tower3;\n        case 4: return tower4;\n        case 5: return lab0;\n        case 6: return lab1;\n        case 7: return lab2;\n        case 8: return lab3;\n        case 9: return lab4;\n        case 10: return towerS;\n        case 11: return labS\n        default: return null;\n      }\n    })(number),\n    iconSize: [30, 30],\n    iconAnchor: [15, 15],\n    popupAnchor: [0, 0]\n  });\n}\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\nfunction getAirports() {\n  return fetch(process.env.API_URL + \"/api/airports/allAirports\")\n    .then(res => res.json())\n    .catch(err => console.error(err));\n}\n\nfunction getLines() {\n  return fetch(process.env.API_URL + \"/api/airports/getLines\")\n    .then(res => res.json())\n    .catch(err => console.error(err));\n}\n\n\nclass App extends Component {\n\n  state = {\n    lat: 45.258903771066355,\n    lng: 11.242709547379991,\n    zoom: 7,\n    airports: [],\n    lines: [],\n  }\n\n  componentDidMount() {\n    this.tick();\n    this.interval = setInterval(() => this.tick(), 120000);\n  }\n\n  componentDidUnmount() {\n    clearInterval(this.interval);\n  }\n\n  tick() {\n    getAirports()\n      .then(airports => {\n        this.setState({\n          airports: airports,\n        });\n      });\n\n    getLines()\n      .then(lines => {\n        this.setState({\n          lines: lines,\n        });\n      });\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n\n    return (\n      <Map className=\"map\" center={position} zoom={this.state.zoom} ref={(ref) => { this.map = ref; }} onZoomEnd={(event) => {this.setState((prevState) => ({...prevState}));}}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n          url={`https://api.tiles.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}.png?access_token=${process.env.MAP_KEY}`}\n          opacity={0.5}\n        />\n        {\n          //Put in airport Markers and popups\n          this.state.airports.map(airport => (\n            <Marker\n              icon={getAirportIcon(airport.infectionLevel)}\n              key={airport.icao}\n              position={[airport.latitude, airport.longitude]}>\n              { this.map.leafletElement.getZoom() > 6 ? <Tooltip\n                offset={[0, 15]}\n                permanent={true}\n                direction=\"bottom\">\n                <b>{airport.icao}: </b>{getInfectionLevelString(airport.infectionLevel)}\n              </Tooltip> : ''}\n              {/* <Popup>\n                <b>{airport.icao}: </b>{getInfectionLevelString(airport.infectionLevel)}\n              </Popup> */}\n            </Marker>\n          ))\n        }\n        {\n          //Put in lines\n          this.state.lines.map(lines => (\n            <Polyline\n              positions={[lines.from, lines.to]}\n            >\n            </Polyline>\n          ))\n        }\n      </Map>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'leaflet/dist/leaflet.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}